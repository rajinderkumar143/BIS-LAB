import numpy as np
import random

class AntColony:
    def __init__(self, distances, n_ants, n_iterations, alpha=1, beta=5, rho=0.5, Q=100):
        """
        distances: 2D numpy array of distances between cities
        n_ants: number of ants
        n_iterations: number of iterations to run
        alpha: pheromone importance
        beta: heuristic importance (usually distance)
        rho: pheromone evaporation rate
        Q: pheromone deposit factor
        """
        self.distances = distances
        self.pheromone = np.ones(self.distances.shape)  # initial pheromone levels
        self.all_inds = range(len(distances))
        self.n_ants = n_ants
        self.n_iterations = n_iterations
        self.alpha = alpha
        self.beta = beta
        self.rho = rho
        self.Q = Q

    def run(self):
        best_length = float('inf')
        best_tour = None
        
        for iteration in range(self.n_iterations):
            all_tours = self.construct_solutions()
            self.update_pheromones(all_tours)
            
            for tour, length in all_tours:
                if length < best_length:
                    best_length = length
                    best_tour = tour
                    
            print(f"Iteration {iteration+1}: Best length = {best_length:.2f}")
            
        return best_tour, best_length

    def construct_solutions(self):
        all_tours = []
        for _ in range(self.n_ants):
            tour = self.construct_solution()
            length = self.tour_length(tour)
            all_tours.append((tour, length))
        return all_tours

    def construct_solution(self):
        tour = []
        visited = set()
        current_city = random.choice(self.all_inds)
        tour.append(current_city)
        visited.add(current_city)
        
        while len(visited) < len(self.distances):
            next_city = self.select_next_city(current_city, visited)
            tour.append(next_city)
            visited.add(next_city)
            current_city = next_city
        return tour

    def select_next_city(self, current_city, visited):
        pheromone = self.pheromone[current_city]
        distances = self.distances[current_city]
        
        probabilities = []
        for city in self.all_inds:
            if city not in visited:
                tau = pheromone[city] ** self.alpha
                eta = (1.0 / distances[city]) ** self.beta if distances[city] > 0 else 0
                probabilities.append(tau * eta)
            else:
                probabilities.append(0)
        probabilities = np.array(probabilities)
        probabilities_sum = np.sum(probabilities)
        
        if probabilities_sum == 0:
            # If all probabilities are zero, pick randomly from unvisited
            candidates = [city for city in self.all_inds if city not in visited]
            return random.choice(candidates)
        probabilities /= probabilities_sum
        return np.random.choice(self.all_inds, p=probabilities)

    def tour_length(self, tour):
        length = 0
        for i in range(len(tour)):
            from_city = tour[i]
            to_city = tour[(i + 1) % len(tour)]
            length += self.distances[from_city][to_city]
        return length

    def update_pheromones(self, all_tours):
        # Evaporate pheromone
        self.pheromone *= (1 - self.rho)
        
        for tour, length in all_tours:
            deposit = self.Q / length
            for i in range(len(tour)):
                from_city = tour[i]
                to_city = tour[(i + 1) % len(tour)]
                self.pheromone[from_city][to_city] += deposit
                self.pheromone[to_city][from_city] += deposit  # because symmetric TSP

# Example usage
if __name__ == "__main__":
    # Example distance matrix for 5 cities (symmetric)
    distances = np.array([
        [0, 2, 9, 10, 7],
        [2, 0, 6, 4, 3],
        [9, 6, 0, 8, 5],
        [10, 4, 8, 0, 6],
        [7, 3, 5, 6, 0]
    ])

    colony = AntColony(distances, n_ants=10, n_iterations=100, alpha=1, beta=5, rho=0.5, Q=100)
    best_tour, best_length = colony.run()

    print("Best tour:", best_tour)
    print("Best tour length:", best_length)
